
#include "Bsp.h"
#include "srio_drv.h"

Uint8 softWareInfo[32];
DAT_FIFO_TYP RS422_RECV_FIFO[RS422_CH_MAX_NUM];
DAT_FIFO_TYP SPI_RECV_FIFO[SPI_CH_MAX_NUM];

/******************************************************************************
 * 函 数 名:fpgaVerGet
 *
 * 函数说明:FPGA版本读取
 * 参数说明:无
 * 输入参数:无
 * 输出参数:无
 * 返 回 值:无
******************************************************************************/
void fpgaVerGet(void)
{
    Uint8 i = 0;
    for(i = 0; i < 32; i++)
    {
        softWareInfo[i] = FPGA_INFO_REG(i);
    }
}
/******************************************************************************
 * 函 数 名:InitFifo
 *
 * 函数说明:初始化发送FIFO
 * 参数说明:无
 * 输入参数:DAT_FIFO_TYP *fifo:FIFO指针
 * 输出参数:无
 * 返 回 值:无
******************************************************************************/

static void InitFifo(DAT_FIFO_TYP *fifo)
{
	memset((void *)(fifo->dat), 0, FIFO_MAX_SIZE * sizeof(fifo->dat[0]));
	
	fifo->dep = 0;
	fifo->enp = 0;
}
/******************************************************************************
 * 函 数 名:GetFifoNum
 *
 * 函数说明:获取FIFO的有效数据帧个数
 * 参数说明:无
 * 输入参数:DAT_FIFO_TYP *fifo:FIFO指针
 * 输出参数:无
 * 返 回 值:无
******************************************************************************/
Uint32 GetFifoNum(DAT_FIFO_TYP *fifo)
{
	Uint32 num = 0;

#if 0
	//没有保持原子操作，进行if比较后，确定了程序分支，此时中断进行了入队操作，
	//有可能会改变FIFO个数计算的方法
	if( fifo->enp < fifo->dep)
	{
		num = fifo->enp + FIFO_MAX_SIZE - fifo->dep;
	}else
	{
		num = fifo->enp - fifo->dep;
	}
#endif

	num = (fifo->enp - fifo->dep + FIFO_MAX_SIZE) % FIFO_MAX_SIZE;
	if(num < 0)
	{
		num += FIFO_MAX_SIZE;
	}

	if(num > FIFO_MAX_SIZE)
	{
		return 0;
	}


	return num;
}
/******************************************************************************
 * 函 数 名:EnqueueFifo
 *
 * 函数说明:FIFO入队
 * 参数说明:无
 * 输入参数:DAT_FIFO_TYP *fifo:FIFO指针,Uint8 *dat:需要入队的数据,Uint32 size:数据大小
 * 输出参数:无
 * 返 回 值:FIFO_OK/FIFO_ERR
******************************************************************************/
static ERR_STA EnqueueFifo(DAT_FIFO_TYP *fifo, Uint8 *dat, Uint32 size)
{
	Uint32 tmp;
	Uint32 i;
	
	for(i = 0; i < size; i++)
	{	
		if(((fifo->enp + 1)%FIFO_MAX_SIZE) == fifo->dep)
		{
				//FIFO满
				return STA_ERR;
		}
		if(size > FIFO_MAX_SIZE)
		{
				 //数据个数大于最大个数
				return STA_ERR;
		}
		
		fifo->dat[fifo->enp] = dat[i];
		
		tmp = (fifo->enp + 1)%FIFO_MAX_SIZE;
		fifo->enp = tmp;
	}
	
	return STA_OK;
}
/******************************************************************************
 * 函 数 名:DequeueFifo
 *
 * 函数说明:FIFO出队
 * 参数说明:无
 * 输入参数:DAT_FIFO_TYP *fifo:FIFO指针,Uint8 *dat:需要入队的数据
 * 输出参数:无
 * 返 回 值:FIFO_OK/FIFO_ERR
******************************************************************************/
static ERR_STA DequeueFifo(DAT_FIFO_TYP *fifo, Uint8 *dat)
{
	Uint32 tmp;
	
	if(fifo->dep == fifo->enp)
	{
			//FIFO空
			return STA_ERR;
	}
	
	*dat = fifo->dat[fifo->dep];
	
	tmp = (fifo->dep + 1)%FIFO_MAX_SIZE;
	fifo->dep = tmp;
	
	return STA_OK;
}

/******************************************************************************
 * 函 数 名:rs422Init
 *
 * 函数说明:rs422初始化
 * 参数说明:无
 * 输入参数:channel:通道号，baud:波特率
 * 输出参数:无
 * 返 回 值:STA_OK/STA_ERR
******************************************************************************/
STATUS rs422Init(Uint16 channel,Uint16 baud)
{
    int i = 0;
    if(channel > RS422_CH_MAX_NUM || channel < 1)
    {
        return STA_ERR;
    }
    InitFifo(&RS422_RECV_FIFO[channel-1]);
    return STA_OK;
}

/******************************************************************************
 * 函 数 名:rs422Read
 *
 * 函数说明:rs422数据读取
 * 参数说明:无
 * 输入参数:channel:通道号，len:读取长度
 * 输出参数:pbuf:存储读取数据
 * 返 回 值:读取数据长度
******************************************************************************/
ERR_STA rs422Read(Uint16 channel,Uint8 *pbuf,Uint16 len)
{
    Uint32 timeout = 0,sta,CompletionCode;
    Uint32 localaddr = (Uint32)pbuf;
    Uint8 fifoLen = 0;
    do
    {
        timeout++;
        sta = RS422_STA_REG(channel)>> 4;
        if((sta ) != 0)
        {
        	if()
            fifoLen = RS422_RX_SIZE_REG(channel);
            if(len > fifoLen)
            {
                len = fifoLen;
                printf("fifolen %d",fifoLen);
            }
            RS422_FIFO_LENGTH(channel,len);
            if(len & 0x7)
            {
                len += (0x8 - len&0x7);
            }
            timeout = 0;
            do
            {
                timeout++; 
                sta = RS422_STA_REG(channel);
                if((sta & 0x40) != 0)
                {
                    CompletionCode = Keystone_SRIO_DirectIO(localaddr,RS422_TXRX_FIFO(channel),\
                    FPGA_SRIO_BASE_ID,len,1,1,SRIO_PKT_TYPE_NREAD);
                    if(CompletionCode != 0)
                    {
                        printf("channel %d SRIO read fail CompletionCode %d\r\n",channel,CompletionCode);
                        return STA_ERR;
                    }
                    return STA_OK;
                }
            }while(timeout < 50000);
        }
    }while(timeout < 50000);
    if(timeout == 50000)
    {
        return STA_ERR;
    }

}
void rs422Trans(Uint16 channel,Uint8 *pbuf,Uint16 len)
{
	ERR_STA sta;
	sta = rs422Read(channel,pbuf,len);
	big2little(pbuf,len);
}
/******************************************************************************
 * 函 数 名:rs422Write
 *
 * 函数说明:rs422数据写入
 * 参数说明:无
 * 输入参数:channel:通道号，len:读取长度
 * 输出参数:无
 * 返 回 值:STA_OK/STA_ERR
******************************************************************************/
STATUS rs422Write(Uint16 channel,Uint8 *pbuf,Uint16 len)
{
    Uint32 timeout = 0,sta,CompletionCode,fifolen;
    Uint32 localaddr = (Uint32)pbuf;
    //fifolen = RS422_TXFIFO_GET_REG()
    RS422_TX_SIZE_REG(channel,len);
    RS422_CTR_REG(channel,CLR_RX_FIFO | EN_TX);
    if(len & 0x7)
    {
        len += (0x8 - len&0x7);
    }
    do
    {
        timeout++;
        sta = RS422_STA_REG(channel);
        if((sta & 0x3) != 3)
        {
           CompletionCode =  Keystone_SRIO_DirectIO(localaddr,RS422_TXRX_FIFO(channel),\
            FPGA_SRIO_BASE_ID,len,0,0,SRIO_PKT_TYPE_NWRITE);
            RS422_CTR_REG(channel,DIS_TX);
            if(CompletionCode != 0)
            {
                printf("channel %d SRIO write fail CompletionCode %d\r\n",channel,CompletionCode);
                return STA_ERR;
            }
            return STA_OK;
        }
    }while(timeout < 50000);
    return STA_ERR;
}
/******************************************************************************
 * 函 数 名:fpgaSpiInit
 *
 * 函数说明:spi初始化
 * 参数说明:无
 * 输入参数:channel:通道号，baud:波特率
 * 输出参数:无
 * 返 回 值:STA_OK/STA_ERR
******************************************************************************/
STATUS fpgaSpiInit(Uint32 channel,Uint32 baud)
{
    int i;
    if(channel > SPI_CH_MAX_NUM || channel < 1)
    {
        return STA_ERR;
    }
    InitFifo(&SPI_RECV_FIFO[channel-1]);
    return STA_OK;
}
/******************************************************************************
 * 函 数 名:fpgaSpiRead
 *
 * 函数说明:spi数据读取
 * 参数说明:无
 * 输入参数:channel:通道号，len:读取长度
 * 输出参数:pbuf:存储读取数据
 * 返 回 值:读取数据长度
******************************************************************************/
Uint32 fpgaSpiRead(Uint32 channel,Uint8 *pbuf,Uint32 len)
{
    Uint32 timeout = 0,readCnt = 0;
    Uint8  *rxbuf = pbuf;
    Uint8 fifoLen;
    fifoLen = SPI_RX_SIZE_REG(channel);
    do
    {
        timeout++;
        if(((SPI_STA_REG(channel)>>4)&0x3) != 0)
        {
            rxbuf[readCnt] = (Uint8)SPI_RX_FIFO_REG(channel);
            readCnt++;
            timeout = 0;
        }
        if(readCnt == len)
        {
            break;
        }
    }while(timeout < 50000);
    return readCnt;
}
/******************************************************************************
 * 函 数 名:fpgaSpiWrite
 *
 * 函数说明:spi数据写入
 * 参数说明:无
 * 输入参数:channel:通道号，len:读取长度
 * 输出参数:无
 * 返 回 值:STA_OK/STA_ERR
******************************************************************************/
STATUS fpgaSpiWrite(Uint32 channel,Uint8 *pbuf,Uint32 len)
{
    Uint32 timeout = 0,sendCnt = 0;
    Uint8 *txbuf = pbuf;
    SPI_TX_SIZE_REG(channel,len);
    SPI_CTR_REG(channel,CLR_RX_FIFO | EN_TX);
    do
    {
        timeout++;
        if(((SPI_STA_REG(channel))&0x3) != 3)
        {
            SPI_TX_FIFO_REG(channel,txbuf[sendCnt]);
            sendCnt++;
            timeout = 0;
        }
        if(sendCnt == len)
        {
            break;
        }

    }while(timeout < 50000);
    SPI_CTR_REG(channel,DIS_TX);
    if(timeout == 50000)
    {
    	printf("timeout\r\n");
    }
    return STA_ERR;
}


/******************************************************************************
 * 函 数 名:Rs422Recv
 *
 * 函数说明:rs422数据接收
 * 参数说明:无
 * 输入参数:channel 通道号,buf 存放数据的指针,len 长度
 * 输出参数:无
 * 返 回 值:成功读取数据的长度
******************************************************************************/
uint16_t Rs422Recv(uint8_t channel, uint8_t *buf, uint16_t len)
{
    int32_t fifo_len;
    uint16_t i;
    uint8_t dat = 0;

    fifo_len = GetFifoNum(&RS422_RECV_FIFO[channel]);

    fifo_len = (uint16_t)fifo_len;

    if(fifo_len < len)
    {
        len = fifo_len;
    }
    for(i=0;i<len;i++)
    {
        if(DequeueFifo(&RS422_RECV_FIFO[channel], &dat) == STA_ERR)
        {
            return i;
        }
        buf[i] = dat;
    }
    return len;
}
/******************************************************************************
 * 函 数 名:SpiRecv
 *
 * 函数说明:spi数据接收
 * 参数说明:无
 * 输入参数:channel 通道号,buf 存放数据的指针,len 长度
 * 输出参数:无
 * 返 回 值:成功读取数据的长度
******************************************************************************/
uint16_t SpiRecv(uint8_t channel, uint8_t *buf, uint16_t len)
{
    int32_t fifo_len;
    uint16_t i;
    uint8_t dat = 0;

    fifo_len = GetFifoNum(&SPI_RECV_FIFO[channel]);

    fifo_len = (uint16_t)fifo_len;

    if(fifo_len < len)
    {
        len = fifo_len;
    }
    for(i=0;i<len;i++)
    {
        if(DequeueFifo(&SPI_RECV_FIFO[channel], &dat) == STA_ERR)
        {
            return i;
        }
        buf[i] = dat;
    }
    return len;
}


/******************************************************************************
 * 函 数 名:Spi_Rs422Isr
 *
 * 函数说明:spi/rs422中断服务函数
 * 参数说明:无
 * 输入参数:无
 * 输出参数:无
 * 返 回 值:无
******************************************************************************/
ERR_STA Spi_Rs422Isr(void)
{
    Uint32 fpgaIntSta,i,sta;
    Uint8 dat;
    fpgaIntSta = M_INT_STA_REG;
    
    if((fpgaIntSta & SPI_INT) == 0x2)
    {
        for(i = 0; i < 6; i++)
        {
            sta = SPI_STA_REG(i);
            if(((sta >> 15) == 1) && ((sta  >> 4) != 0))
            {
                SPI_CTR_REG(i,CLR_RX_INT | EN_RX_INT);
               dat =  (Uint8)SPI_RX_FIFO_REG(i);
               if(EnqueueFifo(&SPI_RECV_FIFO[i],&dat,1) == STA_ERR)
               {
                    return STA_ERR;
               }
            }
        }

    }
    
    if((fpgaIntSta & RS422_INT) == 0x1)
    {
        for(i = 0; i < 12; i++)
        {
            sta = RS422_STA_REG(i);
            if(((sta >> 15) == 1) && ((sta  >> 4) != 0))
            {
                RS422_CTR_REG(i,CLR_RX_INT | EN_RX_INT);
               dat =  (Uint8)RS422_RX_FIFO_REG(i);
               if(EnqueueFifo(&RS422_RECV_FIFO[i],&dat,1) == STA_ERR)
               {
                    return STA_ERR;
               }
            }
        }

    }
}


Int32 Keystone_SRIO_DirectIO(Uint32 uiLocalAddress, Uint32 uiRemoteAddress,
    Uint32 uiDestID, Uint32 uiByteCount, Uint32 uiPort, Uint32 uiLSU_No,
    SRIO_Packet_Type packetType)
{
    SRIO_LSU_Transfer lsuTransfer;


    lsuTransfer.rioAddressMSB=0;
    lsuTransfer.rioAddressLSB_ConfigOffset= uiRemoteAddress;
    lsuTransfer.localDspAddress= uiLocalAddress;
    lsuTransfer.bytecount= uiByteCount;
    lsuTransfer.packetType= packetType;
    lsuTransfer.dstID= uiDestID;
    lsuTransfer.doorbellInfo= 0;
    lsuTransfer.waitLsuReady= 1;
    lsuTransfer.lsuNum= uiLSU_No;
    lsuTransfer.doorbellValid = 0;
    lsuTransfer.intrRequest = 0;
    lsuTransfer.supGoodInt = 0;
    lsuTransfer.priority = 0;
    lsuTransfer.outPortID = uiPort;
    lsuTransfer.idSize = 0;
    lsuTransfer.srcIDMap = 0;
    lsuTransfer.hopCount = 0;

    KeyStone_SRIO_LSU_transfer(&lsuTransfer);

    return KeyStone_SRIO_wait_LSU_completion(uiLSU_No,
        lsuTransfer.transactionID, lsuTransfer.contextBit);

}


#define BIGLITTLE(BIG) (((BIG&0xff) << 24)|((BIG&0xff00) << 8)|((BIG >>24)& 0xff)|(( BIG&0xff0000)>>8))

void big2little(UINT8* pbuf, int len)
{
	UINT8 remain_num,i;
    UINT32 temph ,templ;
    UINT64 u64_temp;
	UINT8 *remain_buf;
    UINT64 *buf = (UINT64 *)pbuf;
    while(len > 0)
    {
    	templ = *buf & 0xffffffff;
    	temph = (*buf >> 32) & 0xffffffff;
    	u64_temp = BIGLITTLE(templ);
    	u64_temp = (u64_temp <<32) | BIGLITTLE(temph);
    	*buf = u64_temp;
    	if(len < 8)
    	{
    		remain_num = 8 - len;
    		remain_buf = (UINT8 *)buf;
    		for(i = 0; i < len; i++)
    		{
    			remain_buf[i] = remain_buf[i+remain_num];
    		}
    		memset(remain_buf+len,0x0,remain_num);
    	}
    	buf++;
    	len -= 8;
    }
}



